plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.strikesenchantcore'
version = '1.0.0'
description = 'EnchantCore Prison Pickaxe Plugin'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    proguardToolClasspath {
        description = 'The classpath for ProGuard tool itself. Intentionally non-transitive.'
        setTransitive(false)
        setCanBeResolved(true)
        setCanBeConsumed(false)
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'https://maven.enginehub.org/repo/' }
    maven { url = 'https://jitpack.io' } // For VaultAPI only
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    // ItemsAdder API repository
    maven {
        name = 'matteodev'
        url = 'https://maven.devs.beer/'
    }
}

dependencies {
    // Spigot API
    compileOnly 'org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT'

    // Vault API
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'

    // PlaceholderAPI
    compileOnly 'me.clip:placeholderapi:2.11.6'

    // WorldGuard and WorldEdit APIs
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.9'
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.14'

    // ItemsAdder API - Use correct repository and group ID
    compileOnly 'dev.lone:api-itemsadder:4.0.10'

    // bStats - this will be shaded into your plugin
    implementation 'org.bstats:bstats-bukkit:3.0.2'

    // JetBrains Annotations
    compileOnly 'org.jetbrains:annotations:23.0.0'

    // +++ JACKSON DATABIND (for StrikesLicenseManager) +++
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'

    // === ProGuard Tool Dependencies ===
    proguardToolClasspath 'com.guardsquare:proguard-core:9.1.1'
    proguardToolClasspath 'com.guardsquare:proguard-base:7.4.2'
    proguardToolClasspath 'org.apache.logging.log4j:log4j-api:2.17.1'
    proguardToolClasspath 'org.apache.logging.log4j:log4j-core:2.17.1'

    // === Plugin Compile-Time Dependencies ===
    compileOnly 'org.apache.logging.log4j:log4j-api:2.17.1'
    compileOnly 'org.apache.logging.log4j:log4j-core:2.17.1'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

shadowJar {
    relocate 'org.bstats', 'com.strikesenchantcore.lib.bstats'
    relocate 'com.fasterxml.jackson', 'com.strikesenchantcore.lib.jackson'

    destinationDirectory = file("$buildDir/libs")
    archiveBaseName = project.name
    archiveClassifier = ''
    archiveVersion = project.version

    dependencies {
        exclude(dependency('com.guardsquare:proguard-core'))
        exclude(dependency('com.guardsquare:proguard-base'))
        exclude(dependency('org.apache.logging.log4j:log4j-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-core'))
    }
}

task obfuscate(dependsOn: shadowJar) {
    doLast {
        def inputJar = shadowJar.archiveFile.get().asFile.absolutePath
        def outputJar = "${buildDir}/libs/${project.name}-Premium-${project.version}.jar"
        def configFile = file('proguard.pro')

        if (!configFile.exists()) {
            throw new GradleException("ProGuard configuration file 'proguard.pro' not found at ${configFile.absolutePath}!")
        }

        println "====== RUNNING PROGUARD OBFUSCATION ======"
        println "Input JAR:  ${inputJar}"
        println "Output JAR: ${outputJar}"
        println "Config:     ${configFile.absolutePath}"

        String javaHome = System.getProperty("java.home")
        List<String> javaRuntimeJarDirectives = new ArrayList<>()

        String javaBaseJmodPath = "${javaHome}/jmods/java.base.jmod"
        File javaBaseJmodFile = file(javaBaseJmodPath)
        if (javaBaseJmodFile.exists()){
            javaRuntimeJarDirectives.add("-libraryjars \"${javaBaseJmodFile.absolutePath.replace('\\', '/')}\"(!**.module-info)")
        } else {
            println "ERROR: Could not locate java.base.jmod at ${javaBaseJmodPath}. ProGuard will likely fail."
        }

        String javaLoggingJmodPath = "${javaHome}/jmods/java.logging.jmod"
        File javaLoggingJmodFile = file(javaLoggingJmodPath)
        if (javaLoggingJmodFile.exists()){
            javaRuntimeJarDirectives.add("-libraryjars \"${javaLoggingJmodFile.absolutePath.replace('\\', '/')}\"(!**.module-info)")
        }

        def tempConfig = file("${buildDir}/temp-proguard.config")
        def libraryJarDirectives = configurations.compileClasspath.files.collect {
            if (!it.absolutePath.equals(inputJar)) {
                "-libraryjars \"${it.absolutePath.replace('\\', '/')}\""
            } else {
                null
            }
        }.findAll { it != null }.join("\n")

        tempConfig.text = """
            -injars "${inputJar.replace('\\', '/')}"
            -outjars "${outputJar.replace('\\', '/')}"
            ${javaRuntimeJarDirectives.join("\n")}
            ${libraryJarDirectives}
            -include "${configFile.absolutePath.replace('\\', '/')}"
            -printconfiguration "${buildDir.absolutePath.replace('\\', '/')}/proguard-effective.config"
            -dump "${buildDir.absolutePath.replace('\\', '/')}/proguard-dump.txt"
        """.stripIndent()

        javaexec {
            classpath = configurations.proguardToolClasspath
            main = 'proguard.ProGuard'
            args = ["@${tempConfig.absolutePath}"]
            maxHeapSize = "1G"
            jvmArgs = [
                    '-Dfile.encoding=UTF-8',
                    '-XX:+UseParallelGC'
            ]
            standardOutput = new FileOutputStream("${buildDir}/proguard-output.txt")
            errorOutput = new FileOutputStream("${buildDir}/proguard-error.txt")
        }
    }
}

tasks.build.dependsOn obfuscate

tasks.jar {
    enabled = false
}

tasks.assemble {
    dependsOn obfuscate
}